// <auto-generated />
using System;
using HiNetProjectApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiNetProjectApi.Migrations
{
    [DbContext(typeof(BookEcommerceDbContext))]
    [Migration("20250729031328_remove relationship notification table")]
    partial class removerelationshipnotificationtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.AgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38c9a5bc-fd16-4cfe-98ad-8596885823a6"),
                            Description = "Phù hợp với mọi lứa tuổi, kể cả trẻ sơ sinh và mẫu giáo.",
                            Name = "0+"
                        },
                        new
                        {
                            Id = new Guid("af95f5a2-e88b-42d7-882f-91cf6367a84b"),
                            Description = "Dành cho trẻ em từ 3 tuổi trở lên. Nội dung đơn giản, không có yếu tố bạo lực hoặc gây sợ hãi.",
                            Name = "3+"
                        },
                        new
                        {
                            Id = new Guid("6927136d-8256-4d1a-942c-2dde892dce2d"),
                            Description = "Dành cho trẻ em bắt đầu đọc, có thể có nội dung giáo dục và tưởng tượng nhẹ.",
                            Name = "6+"
                        },
                        new
                        {
                            Id = new Guid("2c994161-5662-443b-b9ab-6c6c0953135d"),
                            Description = "Dành cho trẻ em cấp 1 trở lên. Nội dung có thể bao gồm xung đột nhẹ hoặc bài học đạo đức.",
                            Name = "10+"
                        },
                        new
                        {
                            Id = new Guid("3c434270-31a1-4789-b7a0-6942f677faf3"),
                            Description = "Dành cho thiếu niên. Có thể đề cập đến các vấn đề xã hội, học đường, tâm lý tuổi mới lớn.",
                            Name = "12+"
                        },
                        new
                        {
                            Id = new Guid("c27c3947-f242-45b4-b4a5-a51157948037"),
                            Description = "Nội dung phức tạp hơn, phù hợp với học sinh cấp 3. Có thể có yếu tố tình cảm hoặc suy nghĩ cá nhân.",
                            Name = "15+"
                        },
                        new
                        {
                            Id = new Guid("f6c382a6-4c15-4cbe-bfa2-52adcaf2515b"),
                            Description = "Có thể có yếu tố bạo lực nhẹ, ngôn ngữ mạnh hoặc đề cập đến các chủ đề xã hội nghiêm túc.",
                            Name = "16+"
                        },
                        new
                        {
                            Id = new Guid("95de34ad-3e2a-4fd7-93f4-1cad58fef562"),
                            Description = "Dành cho người trưởng thành. Có thể chứa nội dung bạo lực, tâm lý phức tạp hoặc tình dục.",
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("5f017f33-c136-41e6-814c-3f218f88aff6"),
                            Description = "Phù hợp với học sinh từ tiểu học đến trung học.",
                            Name = "Học sinh"
                        },
                        new
                        {
                            Id = new Guid("44c67b72-1032-4e8f-9ec4-d39ead0e529d"),
                            Description = "Dành cho người trưởng thành trẻ tuổi với nội dung chuyên môn, phát triển bản thân, hoặc kỹ năng sống.",
                            Name = "Sinh viên - Người đi làm"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AgeRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CoverTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageTotal")
                        .HasColumnType("int");

                    b.Property<float>("PriceBeforeDiscount")
                        .HasColumnType("real");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoldTotal")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Witdh")
                        .HasColumnType("real");

                    b.Property<int>("YearPublish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2fb3a98-5683-4fd2-9c48-a4e5dbbeb89b"),
                            Name = "Bìa mềm"
                        },
                        new
                        {
                            Id = new Guid("e8bf47c9-d940-4385-85a3-6295e9b78a33"),
                            Name = "Bìa cứng"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0a150e3-3d1f-4366-b1b7-8a146533f866"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(2991),
                            Name = "Văn học",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(2995)
                        },
                        new
                        {
                            Id = new Guid("5d28fe8b-a1b2-43a2-b592-a050dc33d7a0"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(2999),
                            Name = "Kinh tế",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3000)
                        },
                        new
                        {
                            Id = new Guid("87841a60-e8ea-4daa-b38d-03b78829ca6b"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3004),
                            Name = "Kỹ năng sống",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3005)
                        },
                        new
                        {
                            Id = new Guid("bf8234f7-6973-4d62-8108-ef2f9c4dad31"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3007),
                            Name = "Giáo dục",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3007)
                        },
                        new
                        {
                            Id = new Guid("588059f6-ce07-4c98-8146-f39b06adb01e"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3009),
                            Name = "Khoa học - Công nghệ",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3010)
                        },
                        new
                        {
                            Id = new Guid("1a714fee-5b7f-4ee5-a8cf-4feabf2b6d0e"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3014),
                            Name = "Tâm lý - Tình cảm",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3014)
                        },
                        new
                        {
                            Id = new Guid("89af6711-5ac5-4258-89b7-afc7c90eacc2"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3016),
                            Name = "Thiếu nhi",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3017)
                        },
                        new
                        {
                            Id = new Guid("24365f1d-bbcc-4100-8b86-990fa22cb957"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3019),
                            Name = "Lịch sử",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3019)
                        },
                        new
                        {
                            Id = new Guid("c0ea0e79-5e2a-4381-8131-a7bed0d0025e"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3021),
                            Name = "Văn hóa - Xã hội",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3022)
                        },
                        new
                        {
                            Id = new Guid("276df91e-a552-497c-b95f-917899412204"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3025),
                            Name = "Tiểu sử - Hồi ký",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3025)
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaidMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5310bdd6-cf31-452a-8e52-d32bb601a4a4"),
                            Name = "Nhà xuất bản Kim Đồng"
                        },
                        new
                        {
                            Id = new Guid("d350bcd9-2525-48c6-9d69-46bae4aec52f"),
                            Name = "Nhà xuất bản Trẻ"
                        },
                        new
                        {
                            Id = new Guid("ea9957e6-7db0-4da0-b424-71d294ca4762"),
                            Name = "Nhà xuất bản Tổng hợp TP.HCM"
                        },
                        new
                        {
                            Id = new Guid("7884d857-6363-41f5-b691-276d611da010"),
                            Name = "Nhà xuất bản Lao Động"
                        },
                        new
                        {
                            Id = new Guid("06c81552-4b1c-4428-8b10-74a42d58a316"),
                            Name = "Nhà xuất bản Văn Học"
                        },
                        new
                        {
                            Id = new Guid("435af5c4-8992-4c94-b98f-7f483815c165"),
                            Name = "Nhà xuất bản Giáo Dục Việt Nam"
                        },
                        new
                        {
                            Id = new Guid("a14f4aff-db64-487c-b6ae-8e38c62c9443"),
                            Name = "Nhà xuất bản Chính Trị Quốc Gia Sự Thật"
                        },
                        new
                        {
                            Id = new Guid("a9e42029-4533-443c-a991-77c4fd025983"),
                            Name = "Nhà xuất bản Hội Nhà Văn"
                        },
                        new
                        {
                            Id = new Guid("cf1cafe6-f572-4fda-865e-b5c474a40c95"),
                            Name = "Nhà xuất bản Thanh Niên"
                        },
                        new
                        {
                            Id = new Guid("d018a1ac-7815-45e0-abdf-227f64144ecb"),
                            Name = "Nhà xuất bản Phụ Nữ"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantities")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("StockQuantities");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("SubGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("385e8fe9-2380-4ec5-97df-230996f7b285"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3094),
                            GenreId = new Guid("e0a150e3-3d1f-4366-b1b7-8a146533f866"),
                            Name = "Tiểu thuyết",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3094)
                        },
                        new
                        {
                            Id = new Guid("d15299ce-aba5-4123-903c-8a612e363b40"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3100),
                            GenreId = new Guid("e0a150e3-3d1f-4366-b1b7-8a146533f866"),
                            Name = "Truyện ngắn",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3101)
                        },
                        new
                        {
                            Id = new Guid("493baa5b-9751-417b-8b10-c9f259168b7b"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3104),
                            GenreId = new Guid("e0a150e3-3d1f-4366-b1b7-8a146533f866"),
                            Name = "Thơ",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3104)
                        },
                        new
                        {
                            Id = new Guid("dbfbfd37-a68e-4c0b-99be-58ee7a091071"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3173),
                            GenreId = new Guid("5d28fe8b-a1b2-43a2-b592-a050dc33d7a0"),
                            Name = "Marketing",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3174)
                        },
                        new
                        {
                            Id = new Guid("6f9a9ecb-7a79-45ea-88a2-ee0de24e964a"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3176),
                            GenreId = new Guid("5d28fe8b-a1b2-43a2-b592-a050dc33d7a0"),
                            Name = "Khởi nghiệp",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3177)
                        },
                        new
                        {
                            Id = new Guid("ea934d49-64d7-4030-9830-f6938462d6bd"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3181),
                            GenreId = new Guid("87841a60-e8ea-4daa-b38d-03b78829ca6b"),
                            Name = "Phát triển bản thân",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3181)
                        },
                        new
                        {
                            Id = new Guid("d3ad3b7e-f881-456c-9fc8-89156c55a2c8"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3184),
                            GenreId = new Guid("87841a60-e8ea-4daa-b38d-03b78829ca6b"),
                            Name = "Tư duy tích cực",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3184)
                        },
                        new
                        {
                            Id = new Guid("256702e8-a815-45e1-9561-6e52be3ab65f"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3186),
                            GenreId = new Guid("87841a60-e8ea-4daa-b38d-03b78829ca6b"),
                            Name = "Kỹ năng giao tiếp",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3187)
                        },
                        new
                        {
                            Id = new Guid("e1a98a44-b60e-492a-88af-2c6a27afe285"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3192),
                            GenreId = new Guid("bf8234f7-6973-4d62-8108-ef2f9c4dad31"),
                            Name = "Giáo dục sớm",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3192)
                        },
                        new
                        {
                            Id = new Guid("d7233a86-3d42-4850-bf68-d44a845d7856"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3196),
                            GenreId = new Guid("bf8234f7-6973-4d62-8108-ef2f9c4dad31"),
                            Name = "Tâm lý học đường",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 13, 27, 843, DateTimeKind.Utc).AddTicks(3196)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.AgeRating", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("HiNetProjectApi.Models.Domain.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.SubGenre", "SubGenre")
                        .WithMany()
                        .HasForeignKey("SubGenreId");

                    b.Navigation("AgeRating");

                    b.Navigation("CoverType");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany("BookImages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Cart", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Payment", "OderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithOne("StockQuantity")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.StockQuantity", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Navigation("BookImages");

                    b.Navigation("StockQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
