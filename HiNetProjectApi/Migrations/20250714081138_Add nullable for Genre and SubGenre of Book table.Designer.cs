// <auto-generated />
using System;
using HiNetProjectApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiNetProjectApi.Migrations
{
    [DbContext(typeof(BookEcommerceDbContext))]
    [Migration("20250714081138_Add nullable for Genre and SubGenre of Book table")]
    partial class AddnullableforGenreandSubGenreofBooktable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.AgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81d4da79-361c-4d28-8620-71989a8361c2"),
                            Description = "Phù hợp với mọi lứa tuổi, kể cả trẻ sơ sinh và mẫu giáo.",
                            Name = "0+"
                        },
                        new
                        {
                            Id = new Guid("6dc99a47-1457-4ae0-aa37-4342f2bc27ca"),
                            Description = "Dành cho trẻ em từ 3 tuổi trở lên. Nội dung đơn giản, không có yếu tố bạo lực hoặc gây sợ hãi.",
                            Name = "3+"
                        },
                        new
                        {
                            Id = new Guid("caf342ce-009f-42b5-8cbd-61680581780a"),
                            Description = "Dành cho trẻ em bắt đầu đọc, có thể có nội dung giáo dục và tưởng tượng nhẹ.",
                            Name = "6+"
                        },
                        new
                        {
                            Id = new Guid("2f1b3994-b94e-47cd-b091-1e04cbd7ddab"),
                            Description = "Dành cho trẻ em cấp 1 trở lên. Nội dung có thể bao gồm xung đột nhẹ hoặc bài học đạo đức.",
                            Name = "10+"
                        },
                        new
                        {
                            Id = new Guid("e15c1ac8-4f28-4fb2-b59e-913b732a1b3a"),
                            Description = "Dành cho thiếu niên. Có thể đề cập đến các vấn đề xã hội, học đường, tâm lý tuổi mới lớn.",
                            Name = "12+"
                        },
                        new
                        {
                            Id = new Guid("a8bc3473-9334-4a94-b31c-e3edcfcf156f"),
                            Description = "Nội dung phức tạp hơn, phù hợp với học sinh cấp 3. Có thể có yếu tố tình cảm hoặc suy nghĩ cá nhân.",
                            Name = "15+"
                        },
                        new
                        {
                            Id = new Guid("8a8fc89a-4660-4593-82a8-885bfe09e7e2"),
                            Description = "Có thể có yếu tố bạo lực nhẹ, ngôn ngữ mạnh hoặc đề cập đến các chủ đề xã hội nghiêm túc.",
                            Name = "16+"
                        },
                        new
                        {
                            Id = new Guid("b459af96-bdc0-401b-b954-7ec73eb28ff7"),
                            Description = "Dành cho người trưởng thành. Có thể chứa nội dung bạo lực, tâm lý phức tạp hoặc tình dục.",
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("99fda5c8-9aed-4f03-a875-c9b7c5a1e775"),
                            Description = "Phù hợp với học sinh từ tiểu học đến trung học.",
                            Name = "Học sinh"
                        },
                        new
                        {
                            Id = new Guid("ee96e98d-3f0e-4dd2-a975-37ffbefcda71"),
                            Description = "Dành cho người trưởng thành trẻ tuổi với nội dung chuyên môn, phát triển bản thân, hoặc kỹ năng sống.",
                            Name = "Sinh viên - Người đi làm"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AgeRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CoverTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageTotal")
                        .HasColumnType("int");

                    b.Property<float>("PriceBeforeDiscount")
                        .HasColumnType("real");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoldTotal")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Witdh")
                        .HasColumnType("real");

                    b.Property<int>("YearPublish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1875d341-3c11-4e92-a14f-7828f573d733"),
                            Name = "Bìa mềm"
                        },
                        new
                        {
                            Id = new Guid("99cde528-983d-43f7-aa06-a545bc6ce94a"),
                            Name = "Bìa cứng"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fed37f37-8b9c-42dc-8d25-20605ef4ac31"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(932),
                            Name = "Văn học",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(937)
                        },
                        new
                        {
                            Id = new Guid("daf93d3f-f3af-4df7-9f11-b9d64392b629"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(944),
                            Name = "Kinh tế",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(945)
                        },
                        new
                        {
                            Id = new Guid("e634bcd2-3743-414a-aa2f-ed8b9cab9521"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(950),
                            Name = "Kỹ năng sống",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(951)
                        },
                        new
                        {
                            Id = new Guid("970d34ee-7471-461b-b34d-11eb6e7507c4"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1023),
                            Name = "Giáo dục",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1024)
                        },
                        new
                        {
                            Id = new Guid("5baa5386-5a6f-4096-bff7-96e38ad8405b"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1028),
                            Name = "Khoa học - Công nghệ",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1029)
                        },
                        new
                        {
                            Id = new Guid("579e8186-852a-410e-b166-808f46bf5a54"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1035),
                            Name = "Tâm lý - Tình cảm",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1036)
                        },
                        new
                        {
                            Id = new Guid("7c361f8c-0da9-4265-8aeb-db34ac0523d2"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1040),
                            Name = "Thiếu nhi",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1041)
                        },
                        new
                        {
                            Id = new Guid("0da55ff4-4c43-487e-bd43-b422454eb7e9"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1045),
                            Name = "Lịch sử",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1045)
                        },
                        new
                        {
                            Id = new Guid("90b8c1d3-4c06-44b8-9323-8ae7ec4679df"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1053),
                            Name = "Văn hóa - Xã hội",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1054)
                        },
                        new
                        {
                            Id = new Guid("0c12eebc-5d10-4b26-ae0b-92bb3cf2c90d"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1060),
                            Name = "Tiểu sử - Hồi ký",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1061)
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaidMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4363d2d-484c-48c5-b63c-b495827700c1"),
                            Name = "Nhà xuất bản Kim Đồng"
                        },
                        new
                        {
                            Id = new Guid("cd0af7b2-8924-42c7-ba9d-07efd4afb0e4"),
                            Name = "Nhà xuất bản Trẻ"
                        },
                        new
                        {
                            Id = new Guid("33d4e422-da76-48ce-9589-b8ce4584150d"),
                            Name = "Nhà xuất bản Tổng hợp TP.HCM"
                        },
                        new
                        {
                            Id = new Guid("6f5840d9-a188-4da5-84f4-5c210a99c1dc"),
                            Name = "Nhà xuất bản Lao Động"
                        },
                        new
                        {
                            Id = new Guid("3de2bdb0-b028-48f0-a6c3-de96a19d4050"),
                            Name = "Nhà xuất bản Văn Học"
                        },
                        new
                        {
                            Id = new Guid("70ccb254-e7b8-4648-b9f8-8ed6bdec198d"),
                            Name = "Nhà xuất bản Giáo Dục Việt Nam"
                        },
                        new
                        {
                            Id = new Guid("3dad09b6-2090-465c-a85b-a14dacd97c14"),
                            Name = "Nhà xuất bản Chính Trị Quốc Gia Sự Thật"
                        },
                        new
                        {
                            Id = new Guid("1b7fd93a-635e-48e9-be1c-b76d116f0ce7"),
                            Name = "Nhà xuất bản Hội Nhà Văn"
                        },
                        new
                        {
                            Id = new Guid("7d28e2fc-32ff-401b-b278-fe4dbd07d1fd"),
                            Name = "Nhà xuất bản Thanh Niên"
                        },
                        new
                        {
                            Id = new Guid("46dbbf8b-483d-45b8-9f9e-a10b79b00b61"),
                            Name = "Nhà xuất bản Phụ Nữ"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantities")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("StockQuantities");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("SubGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2be3e12e-96d7-435f-90aa-ba285070e6ae"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1157),
                            GenreId = new Guid("fed37f37-8b9c-42dc-8d25-20605ef4ac31"),
                            Name = "Tiểu thuyết",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1158)
                        },
                        new
                        {
                            Id = new Guid("e5d456d2-87fe-43b5-b4cf-dbb0e3582e96"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1167),
                            GenreId = new Guid("fed37f37-8b9c-42dc-8d25-20605ef4ac31"),
                            Name = "Truyện ngắn",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1168)
                        },
                        new
                        {
                            Id = new Guid("dd44480d-6e49-415d-86e7-55f987e10405"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1173),
                            GenreId = new Guid("fed37f37-8b9c-42dc-8d25-20605ef4ac31"),
                            Name = "Thơ",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1174)
                        },
                        new
                        {
                            Id = new Guid("21c05c10-0f98-4941-8878-1f3d441f42b2"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1180),
                            GenreId = new Guid("daf93d3f-f3af-4df7-9f11-b9d64392b629"),
                            Name = "Marketing",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1181)
                        },
                        new
                        {
                            Id = new Guid("4bd064bc-535f-4f6d-8cb0-ecfa75b82ec7"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1186),
                            GenreId = new Guid("daf93d3f-f3af-4df7-9f11-b9d64392b629"),
                            Name = "Khởi nghiệp",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1187)
                        },
                        new
                        {
                            Id = new Guid("dd12d2e9-8253-4e63-a92d-62e2fe202d49"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1193),
                            GenreId = new Guid("e634bcd2-3743-414a-aa2f-ed8b9cab9521"),
                            Name = "Phát triển bản thân",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1193)
                        },
                        new
                        {
                            Id = new Guid("db884951-854b-4c60-bf95-88cf40f6be8f"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1204),
                            GenreId = new Guid("e634bcd2-3743-414a-aa2f-ed8b9cab9521"),
                            Name = "Tư duy tích cực",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1205)
                        },
                        new
                        {
                            Id = new Guid("664c516d-7489-4482-9468-fa1ccfd23faa"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1211),
                            GenreId = new Guid("e634bcd2-3743-414a-aa2f-ed8b9cab9521"),
                            Name = "Kỹ năng giao tiếp",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1211)
                        },
                        new
                        {
                            Id = new Guid("11640cd3-4a3c-4f84-9cdc-084a640a4d06"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1217),
                            GenreId = new Guid("970d34ee-7471-461b-b34d-11eb6e7507c4"),
                            Name = "Giáo dục sớm",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1218)
                        },
                        new
                        {
                            Id = new Guid("5a7cbd2f-2e58-47b5-a19a-ed881420d0d2"),
                            CreateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1225),
                            GenreId = new Guid("970d34ee-7471-461b-b34d-11eb6e7507c4"),
                            Name = "Tâm lý học đường",
                            UpdateAt = new DateTime(2025, 7, 14, 8, 11, 35, 798, DateTimeKind.Utc).AddTicks(1226)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.AgeRating", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("HiNetProjectApi.Models.Domain.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.SubGenre", "SubGenre")
                        .WithMany()
                        .HasForeignKey("SubGenreId");

                    b.Navigation("AgeRating");

                    b.Navigation("CoverType");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Cart", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Payment", "OderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", null)
                        .WithOne("StockQuantity")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.StockQuantity", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Navigation("StockQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
