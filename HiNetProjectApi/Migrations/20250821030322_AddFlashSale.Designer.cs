// <auto-generated />
using System;
using HiNetProjectApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiNetProjectApi.Migrations
{
    [DbContext(typeof(BookEcommerceDbContext))]
    [Migration("20250821030322_AddFlashSale")]
    partial class AddFlashSale
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.AgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12f4aec5-fd3d-4bdf-a518-0102669e8992"),
                            Description = "Phù hợp với mọi lứa tuổi, kể cả trẻ sơ sinh và mẫu giáo.",
                            Name = "0+"
                        },
                        new
                        {
                            Id = new Guid("7a215ea4-0e74-44cf-adc1-c2dc911b2a3b"),
                            Description = "Dành cho trẻ em từ 3 tuổi trở lên. Nội dung đơn giản, không có yếu tố bạo lực hoặc gây sợ hãi.",
                            Name = "3+"
                        },
                        new
                        {
                            Id = new Guid("a03c7509-3275-4439-b527-5be02170b7aa"),
                            Description = "Dành cho trẻ em bắt đầu đọc, có thể có nội dung giáo dục và tưởng tượng nhẹ.",
                            Name = "6+"
                        },
                        new
                        {
                            Id = new Guid("f1cbe78b-85f3-4274-aba6-2197f55fd4fb"),
                            Description = "Dành cho trẻ em cấp 1 trở lên. Nội dung có thể bao gồm xung đột nhẹ hoặc bài học đạo đức.",
                            Name = "10+"
                        },
                        new
                        {
                            Id = new Guid("f27308c5-168d-496c-a4c4-fef56543b969"),
                            Description = "Dành cho thiếu niên. Có thể đề cập đến các vấn đề xã hội, học đường, tâm lý tuổi mới lớn.",
                            Name = "12+"
                        },
                        new
                        {
                            Id = new Guid("f03ec229-3db8-4b31-82ab-9e869deaf721"),
                            Description = "Nội dung phức tạp hơn, phù hợp với học sinh cấp 3. Có thể có yếu tố tình cảm hoặc suy nghĩ cá nhân.",
                            Name = "15+"
                        },
                        new
                        {
                            Id = new Guid("02ca209e-ae60-458a-a953-a8388d94e07a"),
                            Description = "Có thể có yếu tố bạo lực nhẹ, ngôn ngữ mạnh hoặc đề cập đến các chủ đề xã hội nghiêm túc.",
                            Name = "16+"
                        },
                        new
                        {
                            Id = new Guid("f299fc14-f097-4561-9d24-16223f0872ed"),
                            Description = "Dành cho người trưởng thành. Có thể chứa nội dung bạo lực, tâm lý phức tạp hoặc tình dục.",
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("7e05113c-709f-4515-aaaa-c0066b04f534"),
                            Description = "Phù hợp với học sinh từ tiểu học đến trung học.",
                            Name = "Học sinh"
                        },
                        new
                        {
                            Id = new Guid("54785580-e7bc-441e-8f01-a1cfc1f8e6bc"),
                            Description = "Dành cho người trưởng thành trẻ tuổi với nội dung chuyên môn, phát triển bản thân, hoặc kỹ năng sống.",
                            Name = "Sinh viên - Người đi làm"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AgeRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CoverTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FlashSaleDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FlashSaleDateStart")
                        .HasColumnType("datetime2");

                    b.Property<float?>("FlashSalePrice")
                        .HasColumnType("real");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFalshSale")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageTotal")
                        .HasColumnType("int");

                    b.Property<float>("PriceBeforeDiscount")
                        .HasColumnType("real");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoldTotal")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Witdh")
                        .HasColumnType("real");

                    b.Property<int>("YearPublish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15b942a0-9cc0-4a34-9675-aa10627579fc"),
                            Name = "Bìa mềm"
                        },
                        new
                        {
                            Id = new Guid("a8a5fd97-8901-4778-98e7-2e6f1d38f590"),
                            Name = "Bìa cứng"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe33fd07-7d32-4fcf-bef6-71c030fadf5f"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6690),
                            Name = "Văn học",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6693)
                        },
                        new
                        {
                            Id = new Guid("f990a8e9-877b-4101-bd6e-09562b8f85ba"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6698),
                            Name = "Kinh tế",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6698)
                        },
                        new
                        {
                            Id = new Guid("bfc1827f-1d61-4998-950e-3335c8cbbc85"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6700),
                            Name = "Kỹ năng sống",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6701)
                        },
                        new
                        {
                            Id = new Guid("13eed41e-5bc4-4f33-b952-e891475b740b"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6703),
                            Name = "Giáo dục",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6704)
                        },
                        new
                        {
                            Id = new Guid("f739e232-8d60-400b-a961-9d4c57452795"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6708),
                            Name = "Khoa học - Công nghệ",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6708)
                        },
                        new
                        {
                            Id = new Guid("301fce0e-2f51-4438-b79e-8c4e46a2a057"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6712),
                            Name = "Tâm lý - Tình cảm",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6712)
                        },
                        new
                        {
                            Id = new Guid("c21d85d9-c9d6-4c94-a78d-6e5fc2d8feba"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6714),
                            Name = "Thiếu nhi",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6715)
                        },
                        new
                        {
                            Id = new Guid("6b7da774-ffac-4f59-8763-341561a42f00"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6717),
                            Name = "Lịch sử",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6717)
                        },
                        new
                        {
                            Id = new Guid("048d1143-2c91-4d1f-ad62-3721fcb317e5"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6720),
                            Name = "Văn hóa - Xã hội",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6720)
                        },
                        new
                        {
                            Id = new Guid("605b92f1-3a15-422e-9873-36c5a202cd36"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6723),
                            Name = "Tiểu sử - Hồi ký",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6724)
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaidMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b556978-7e53-447b-a66a-e522611cd2a9"),
                            Name = "Nhà xuất bản Kim Đồng"
                        },
                        new
                        {
                            Id = new Guid("0e6fe122-7dd9-47b7-ac3e-770317c3b68d"),
                            Name = "Nhà xuất bản Trẻ"
                        },
                        new
                        {
                            Id = new Guid("901a3cea-bc9a-4f5a-a917-adffa32c5afb"),
                            Name = "Nhà xuất bản Tổng hợp TP.HCM"
                        },
                        new
                        {
                            Id = new Guid("94916549-00cb-4dec-8e9f-802e2f385197"),
                            Name = "Nhà xuất bản Lao Động"
                        },
                        new
                        {
                            Id = new Guid("30bbf0ec-ea16-408f-8a94-77ce85991109"),
                            Name = "Nhà xuất bản Văn Học"
                        },
                        new
                        {
                            Id = new Guid("584ff679-5700-4862-907d-e456cfc1993d"),
                            Name = "Nhà xuất bản Giáo Dục Việt Nam"
                        },
                        new
                        {
                            Id = new Guid("2429a247-4aaa-4e46-abe3-d2569be2393a"),
                            Name = "Nhà xuất bản Chính Trị Quốc Gia Sự Thật"
                        },
                        new
                        {
                            Id = new Guid("5df8eef1-6d11-4850-8fae-f244c974b99a"),
                            Name = "Nhà xuất bản Hội Nhà Văn"
                        },
                        new
                        {
                            Id = new Guid("80770998-6cde-4af1-be3b-09aec826ca8d"),
                            Name = "Nhà xuất bản Thanh Niên"
                        },
                        new
                        {
                            Id = new Guid("905ed108-dd02-43ca-8bb2-7b41c97d91f0"),
                            Name = "Nhà xuất bản Phụ Nữ"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantities")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("StockQuantities");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("SubGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de55a2cd-b8b9-4e22-a1e8-70baa7b901c0"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6771),
                            GenreId = new Guid("fe33fd07-7d32-4fcf-bef6-71c030fadf5f"),
                            Name = "Tiểu thuyết",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6773)
                        },
                        new
                        {
                            Id = new Guid("061b82ac-7ffd-4017-aec9-5c52f4dc0dbc"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6777),
                            GenreId = new Guid("fe33fd07-7d32-4fcf-bef6-71c030fadf5f"),
                            Name = "Truyện ngắn",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6777)
                        },
                        new
                        {
                            Id = new Guid("e4eb0185-3037-4caf-85ad-10b6fb923260"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6782),
                            GenreId = new Guid("fe33fd07-7d32-4fcf-bef6-71c030fadf5f"),
                            Name = "Thơ",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6783)
                        },
                        new
                        {
                            Id = new Guid("bcf2ff5f-47ff-4ab0-9e56-b528bab5f8fe"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6785),
                            GenreId = new Guid("f990a8e9-877b-4101-bd6e-09562b8f85ba"),
                            Name = "Marketing",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6786)
                        },
                        new
                        {
                            Id = new Guid("cdd2894c-d0da-4a31-a8ec-dc42d7aefd36"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6788),
                            GenreId = new Guid("f990a8e9-877b-4101-bd6e-09562b8f85ba"),
                            Name = "Khởi nghiệp",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6788)
                        },
                        new
                        {
                            Id = new Guid("7aabc18b-dca5-4e6d-af5c-8f6c15e602e9"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6793),
                            GenreId = new Guid("bfc1827f-1d61-4998-950e-3335c8cbbc85"),
                            Name = "Phát triển bản thân",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6793)
                        },
                        new
                        {
                            Id = new Guid("16022f8f-c6df-4bc3-8edf-501c17f01b4a"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6797),
                            GenreId = new Guid("bfc1827f-1d61-4998-950e-3335c8cbbc85"),
                            Name = "Tư duy tích cực",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6798)
                        },
                        new
                        {
                            Id = new Guid("f1a8ccf0-4f42-4395-b5fa-bc2392146b83"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6801),
                            GenreId = new Guid("bfc1827f-1d61-4998-950e-3335c8cbbc85"),
                            Name = "Kỹ năng giao tiếp",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6801)
                        },
                        new
                        {
                            Id = new Guid("a0ecb6d7-2426-4d1a-b486-2499bf2a558b"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6804),
                            GenreId = new Guid("13eed41e-5bc4-4f33-b952-e891475b740b"),
                            Name = "Giáo dục sớm",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6804)
                        },
                        new
                        {
                            Id = new Guid("abcfaafe-d8da-45c2-b7ce-83347939fdbb"),
                            CreateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6808),
                            GenreId = new Guid("13eed41e-5bc4-4f33-b952-e891475b740b"),
                            Name = "Tâm lý học đường",
                            UpdateAt = new DateTime(2025, 8, 21, 3, 3, 20, 412, DateTimeKind.Utc).AddTicks(6808)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.AgeRating", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("HiNetProjectApi.Models.Domain.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.SubGenre", "SubGenre")
                        .WithMany()
                        .HasForeignKey("SubGenreId");

                    b.Navigation("AgeRating");

                    b.Navigation("CoverType");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany("BookImages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Cart", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Payment", "OderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithOne("StockQuantity")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.StockQuantity", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Navigation("BookImages");

                    b.Navigation("StockQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
