// <auto-generated />
using System;
using HiNetProjectApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiNetProjectApi.Migrations
{
    [DbContext(typeof(BookEcommerceDbContext))]
    [Migration("20250619155209_Add dbContext")]
    partial class AdddbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.AgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("deea17bd-1d39-4c3c-bcbf-4c5c745df20e"),
                            Description = "Phù hợp với mọi lứa tuổi, kể cả trẻ sơ sinh và mẫu giáo.",
                            Name = "0+"
                        },
                        new
                        {
                            Id = new Guid("3b5a1969-38ef-4acb-ab95-e4fd2318c122"),
                            Description = "Dành cho trẻ em từ 3 tuổi trở lên. Nội dung đơn giản, không có yếu tố bạo lực hoặc gây sợ hãi.",
                            Name = "3+"
                        },
                        new
                        {
                            Id = new Guid("c82076f3-c6ff-425c-9c23-a0a11466dfa0"),
                            Description = "Dành cho trẻ em bắt đầu đọc, có thể có nội dung giáo dục và tưởng tượng nhẹ.",
                            Name = "6+"
                        },
                        new
                        {
                            Id = new Guid("c8c3a4d7-07d8-4f25-b012-6d862fc91658"),
                            Description = "Dành cho trẻ em cấp 1 trở lên. Nội dung có thể bao gồm xung đột nhẹ hoặc bài học đạo đức.",
                            Name = "10+"
                        },
                        new
                        {
                            Id = new Guid("999d7097-793b-4e47-9150-70fcd4b7d64e"),
                            Description = "Dành cho thiếu niên. Có thể đề cập đến các vấn đề xã hội, học đường, tâm lý tuổi mới lớn.",
                            Name = "12+"
                        },
                        new
                        {
                            Id = new Guid("53a563af-afed-4305-824c-6102684b7412"),
                            Description = "Nội dung phức tạp hơn, phù hợp với học sinh cấp 3. Có thể có yếu tố tình cảm hoặc suy nghĩ cá nhân.",
                            Name = "15+"
                        },
                        new
                        {
                            Id = new Guid("dd603660-ff89-438b-9818-53c6eb213d25"),
                            Description = "Có thể có yếu tố bạo lực nhẹ, ngôn ngữ mạnh hoặc đề cập đến các chủ đề xã hội nghiêm túc.",
                            Name = "16+"
                        },
                        new
                        {
                            Id = new Guid("8e0e126b-6fc8-4e79-90fe-92709cb215fe"),
                            Description = "Dành cho người trưởng thành. Có thể chứa nội dung bạo lực, tâm lý phức tạp hoặc tình dục.",
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("ca84d295-030c-4977-af47-7775ebfe141f"),
                            Description = "Phù hợp với học sinh từ tiểu học đến trung học.",
                            Name = "Học sinh"
                        },
                        new
                        {
                            Id = new Guid("44022059-0fc2-4aa2-a55a-204d1d59ab24"),
                            Description = "Dành cho người trưởng thành trẻ tuổi với nội dung chuyên môn, phát triển bản thân, hoặc kỹ năng sống.",
                            Name = "Sinh viên - Người đi làm"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AgeRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CoverTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageTotal")
                        .HasColumnType("int");

                    b.Property<float>("PriceBeforeDiscount")
                        .HasColumnType("real");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoldTotal")
                        .HasColumnType("int");

                    b.Property<Guid>("SubGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Witdh")
                        .HasColumnType("real");

                    b.Property<int>("YearPublish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e8388fd-6ea1-411a-a195-57e22f8bf49b"),
                            Name = "Bìa mềm"
                        },
                        new
                        {
                            Id = new Guid("bad95cb6-3404-48e7-b679-315e32d35148"),
                            Name = "Bìa cứng"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78680657-e980-43e1-83b0-3e81ce2e312f"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1578),
                            Name = "Văn học",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1582)
                        },
                        new
                        {
                            Id = new Guid("fe461828-773a-4d70-b3a3-06d94bf9405d"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1585),
                            Name = "Kinh tế",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1585)
                        },
                        new
                        {
                            Id = new Guid("64d7e846-c8b8-4ed4-b8b0-21a8eae71e7c"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1587),
                            Name = "Kỹ năng sống",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1587)
                        },
                        new
                        {
                            Id = new Guid("9a95311e-9c09-4f40-9c83-d7c488565f19"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1589),
                            Name = "Giáo dục",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1589)
                        },
                        new
                        {
                            Id = new Guid("c09ad71a-fef6-44a4-86ca-9f7056897c1c"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1591),
                            Name = "Khoa học - Công nghệ",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1591)
                        },
                        new
                        {
                            Id = new Guid("158c87a6-fd22-43a8-b24a-9d2b6a5c5951"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1593),
                            Name = "Tâm lý - Tình cảm",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1594)
                        },
                        new
                        {
                            Id = new Guid("0562264c-93a0-4028-8e7a-7c26ce0e4861"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1595),
                            Name = "Thiếu nhi",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1596)
                        },
                        new
                        {
                            Id = new Guid("48c2b184-c674-4ae7-aeeb-fb02ebe3618a"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1599),
                            Name = "Lịch sử",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1600)
                        },
                        new
                        {
                            Id = new Guid("97305923-396f-4683-ae33-4832511b7ce9"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1601),
                            Name = "Văn hóa - Xã hội",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1602)
                        },
                        new
                        {
                            Id = new Guid("5367fd9e-65e7-41ef-b03e-c290666451c1"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1604),
                            Name = "Tiểu sử - Hồi ký",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1604)
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaidMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8deecf9-a8eb-45f6-8bf7-0badbb9b0cdd"),
                            Name = "Nhà xuất bản Kim Đồng"
                        },
                        new
                        {
                            Id = new Guid("d98fbda3-5e49-49b0-8521-5e1a18bf25e8"),
                            Name = "Nhà xuất bản Trẻ"
                        },
                        new
                        {
                            Id = new Guid("d9e470e2-fc95-41d4-8ca1-b0c277351606"),
                            Name = "Nhà xuất bản Tổng hợp TP.HCM"
                        },
                        new
                        {
                            Id = new Guid("27094dcd-45e2-47cf-8f9b-2ca598e052ba"),
                            Name = "Nhà xuất bản Lao Động"
                        },
                        new
                        {
                            Id = new Guid("73888777-ac09-416b-8b9a-52e99f2aabc0"),
                            Name = "Nhà xuất bản Văn Học"
                        },
                        new
                        {
                            Id = new Guid("389fe16b-5ffe-47e9-a0a9-6126c1180d8c"),
                            Name = "Nhà xuất bản Giáo Dục Việt Nam"
                        },
                        new
                        {
                            Id = new Guid("3629a780-90dd-4f74-b4d4-537af3d276cb"),
                            Name = "Nhà xuất bản Chính Trị Quốc Gia Sự Thật"
                        },
                        new
                        {
                            Id = new Guid("384ca01c-cd82-4762-a253-82f369331154"),
                            Name = "Nhà xuất bản Hội Nhà Văn"
                        },
                        new
                        {
                            Id = new Guid("c3cac1c9-6993-4842-b3ce-a117e91fdfa0"),
                            Name = "Nhà xuất bản Thanh Niên"
                        },
                        new
                        {
                            Id = new Guid("a6e74408-7315-472d-a67c-415e44625279"),
                            Name = "Nhà xuất bản Phụ Nữ"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantities")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("StockQuantities");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("SubGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d238bd5-4a11-4162-ae9e-f802bcefca82"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1649),
                            GenreId = new Guid("78680657-e980-43e1-83b0-3e81ce2e312f"),
                            Name = "Tiểu thuyết",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1651)
                        },
                        new
                        {
                            Id = new Guid("566537fb-3e08-4536-86c9-86a912b424f2"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1654),
                            GenreId = new Guid("78680657-e980-43e1-83b0-3e81ce2e312f"),
                            Name = "Truyện ngắn",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1654)
                        },
                        new
                        {
                            Id = new Guid("00eb75ea-9bc6-433e-ad27-a461a263cc0f"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1656),
                            GenreId = new Guid("78680657-e980-43e1-83b0-3e81ce2e312f"),
                            Name = "Thơ",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1657)
                        },
                        new
                        {
                            Id = new Guid("14bb7214-315c-4266-9d4e-402ff55cb6c2"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1659),
                            GenreId = new Guid("fe461828-773a-4d70-b3a3-06d94bf9405d"),
                            Name = "Marketing",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1659)
                        },
                        new
                        {
                            Id = new Guid("5d07c604-45ac-45b2-bc30-a66174a5b483"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1661),
                            GenreId = new Guid("fe461828-773a-4d70-b3a3-06d94bf9405d"),
                            Name = "Khởi nghiệp",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1662)
                        },
                        new
                        {
                            Id = new Guid("5f391581-1824-4a68-bf0a-92b9fe6c76f6"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1666),
                            GenreId = new Guid("64d7e846-c8b8-4ed4-b8b0-21a8eae71e7c"),
                            Name = "Phát triển bản thân",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1666)
                        },
                        new
                        {
                            Id = new Guid("a0fc9a18-08ad-4ac3-9f14-7a2f6145f744"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1668),
                            GenreId = new Guid("64d7e846-c8b8-4ed4-b8b0-21a8eae71e7c"),
                            Name = "Tư duy tích cực",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1669)
                        },
                        new
                        {
                            Id = new Guid("18f18f99-fa68-4d9b-899d-9c657132f3f9"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1671),
                            GenreId = new Guid("64d7e846-c8b8-4ed4-b8b0-21a8eae71e7c"),
                            Name = "Kỹ năng giao tiếp",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1671)
                        },
                        new
                        {
                            Id = new Guid("b5e9cbb2-9e5e-4c1d-8223-cfee0691c86d"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1673),
                            GenreId = new Guid("9a95311e-9c09-4f40-9c83-d7c488565f19"),
                            Name = "Giáo dục sớm",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1673)
                        },
                        new
                        {
                            Id = new Guid("eda20bf2-6811-4067-8415-a5c3d6436793"),
                            CreateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1675),
                            GenreId = new Guid("9a95311e-9c09-4f40-9c83-d7c488565f19"),
                            Name = "Tâm lý học đường",
                            UpdateAt = new DateTime(2025, 6, 19, 15, 52, 7, 711, DateTimeKind.Utc).AddTicks(1676)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.AgeRating", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.SubGenre", "SubGenre")
                        .WithMany()
                        .HasForeignKey("SubGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeRating");

                    b.Navigation("CoverType");

                    b.Navigation("Publisher");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Cart", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Payment", "OderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithOne("StockQuantity")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.StockQuantity", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Navigation("StockQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
