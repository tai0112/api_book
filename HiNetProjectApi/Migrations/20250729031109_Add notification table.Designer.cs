// <auto-generated />
using System;
using HiNetProjectApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiNetProjectApi.Migrations
{
    [DbContext(typeof(BookEcommerceDbContext))]
    [Migration("20250729031109_Add notification table")]
    partial class Addnotificationtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.AgeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0dd4fc74-dd6a-43dd-8ff3-373761fb3196"),
                            Description = "Phù hợp với mọi lứa tuổi, kể cả trẻ sơ sinh và mẫu giáo.",
                            Name = "0+"
                        },
                        new
                        {
                            Id = new Guid("c52a6109-aa5e-40b1-9f06-076f77c2d9d6"),
                            Description = "Dành cho trẻ em từ 3 tuổi trở lên. Nội dung đơn giản, không có yếu tố bạo lực hoặc gây sợ hãi.",
                            Name = "3+"
                        },
                        new
                        {
                            Id = new Guid("a4e2b937-8bda-4f13-8ce9-b4fc9f8bc637"),
                            Description = "Dành cho trẻ em bắt đầu đọc, có thể có nội dung giáo dục và tưởng tượng nhẹ.",
                            Name = "6+"
                        },
                        new
                        {
                            Id = new Guid("c76594ba-ad3d-47be-8220-81b38e712a06"),
                            Description = "Dành cho trẻ em cấp 1 trở lên. Nội dung có thể bao gồm xung đột nhẹ hoặc bài học đạo đức.",
                            Name = "10+"
                        },
                        new
                        {
                            Id = new Guid("f8b05cbd-92b1-4704-9645-c88639d526c3"),
                            Description = "Dành cho thiếu niên. Có thể đề cập đến các vấn đề xã hội, học đường, tâm lý tuổi mới lớn.",
                            Name = "12+"
                        },
                        new
                        {
                            Id = new Guid("fff61113-26ca-423f-b85c-4dc6568e4982"),
                            Description = "Nội dung phức tạp hơn, phù hợp với học sinh cấp 3. Có thể có yếu tố tình cảm hoặc suy nghĩ cá nhân.",
                            Name = "15+"
                        },
                        new
                        {
                            Id = new Guid("085f3507-a4b2-4da5-8a98-a35a1c0779d8"),
                            Description = "Có thể có yếu tố bạo lực nhẹ, ngôn ngữ mạnh hoặc đề cập đến các chủ đề xã hội nghiêm túc.",
                            Name = "16+"
                        },
                        new
                        {
                            Id = new Guid("b0f73947-ef70-48c2-af3d-b717913c9881"),
                            Description = "Dành cho người trưởng thành. Có thể chứa nội dung bạo lực, tâm lý phức tạp hoặc tình dục.",
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("d83238db-d0be-4192-b108-8f037fe38bd8"),
                            Description = "Phù hợp với học sinh từ tiểu học đến trung học.",
                            Name = "Học sinh"
                        },
                        new
                        {
                            Id = new Guid("954ed735-b683-47e0-844b-36f76fba7e64"),
                            Description = "Dành cho người trưởng thành trẻ tuổi với nội dung chuyên môn, phát triển bản thân, hoặc kỹ năng sống.",
                            Name = "Sinh viên - Người đi làm"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AgeRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CoverTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageTotal")
                        .HasColumnType("int");

                    b.Property<float>("PriceBeforeDiscount")
                        .HasColumnType("real");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SoldTotal")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Witdh")
                        .HasColumnType("real");

                    b.Property<int>("YearPublish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SubGenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b90a4146-a82e-4c4b-8636-aa1ee190ac3e"),
                            Name = "Bìa mềm"
                        },
                        new
                        {
                            Id = new Guid("5877bba1-652b-497c-8acc-8199b0c00cf9"),
                            Name = "Bìa cứng"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("216c23c9-cdc5-4d70-9e46-c7103ac34114"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7448),
                            Name = "Văn học",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7456)
                        },
                        new
                        {
                            Id = new Guid("8e75fd1f-cc4b-4f7c-8fd2-9709af8ddc0a"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7461),
                            Name = "Kinh tế",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7461)
                        },
                        new
                        {
                            Id = new Guid("ed2ffafb-aacd-4c02-876c-3b0fbc8cf015"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7463),
                            Name = "Kỹ năng sống",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7464)
                        },
                        new
                        {
                            Id = new Guid("ed23fc64-0b03-4676-8ee4-157990e589d0"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7468),
                            Name = "Giáo dục",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7469)
                        },
                        new
                        {
                            Id = new Guid("5b94956c-6426-4ade-a502-be50377d05ca"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7471),
                            Name = "Khoa học - Công nghệ",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7471)
                        },
                        new
                        {
                            Id = new Guid("99d5f27f-d17a-4d02-aeba-f944902f3f75"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7474),
                            Name = "Tâm lý - Tình cảm",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7474)
                        },
                        new
                        {
                            Id = new Guid("51b657a5-832c-4b7b-b756-0a635ff739c9"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7476),
                            Name = "Thiếu nhi",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7477)
                        },
                        new
                        {
                            Id = new Guid("5f06f01f-b4c2-4644-98ec-d205eab9eb07"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7478),
                            Name = "Lịch sử",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7479)
                        },
                        new
                        {
                            Id = new Guid("8b46d456-4e7a-4252-8dac-40115b205f5c"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7481),
                            Name = "Văn hóa - Xã hội",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7481)
                        },
                        new
                        {
                            Id = new Guid("094d5d57-195e-4216-95a2-02f0634f4927"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7484),
                            Name = "Tiểu sử - Hồi ký",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7484)
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceInit")
                        .HasColumnType("real");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaidMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae0b2d57-f7bd-47de-b3f5-320f10240226"),
                            Name = "Nhà xuất bản Kim Đồng"
                        },
                        new
                        {
                            Id = new Guid("e7a8e169-a5d2-4eb3-9425-e5de0a32c98a"),
                            Name = "Nhà xuất bản Trẻ"
                        },
                        new
                        {
                            Id = new Guid("49e84691-419a-4e27-841d-ff2e144ac065"),
                            Name = "Nhà xuất bản Tổng hợp TP.HCM"
                        },
                        new
                        {
                            Id = new Guid("f994fcec-d184-467a-a664-63064d306d5a"),
                            Name = "Nhà xuất bản Lao Động"
                        },
                        new
                        {
                            Id = new Guid("04dfd13c-9099-4c4e-b3c2-33ac857eb1ba"),
                            Name = "Nhà xuất bản Văn Học"
                        },
                        new
                        {
                            Id = new Guid("727dfbe9-ae63-4b01-a17c-506da5c6dcd3"),
                            Name = "Nhà xuất bản Giáo Dục Việt Nam"
                        },
                        new
                        {
                            Id = new Guid("dd70fa4a-cf08-4262-9bbb-4f0bd138acf5"),
                            Name = "Nhà xuất bản Chính Trị Quốc Gia Sự Thật"
                        },
                        new
                        {
                            Id = new Guid("4741a92e-ff56-48bd-8110-f3b639ebd481"),
                            Name = "Nhà xuất bản Hội Nhà Văn"
                        },
                        new
                        {
                            Id = new Guid("35c8cea6-deab-4b6f-9365-3f1a0c6f1317"),
                            Name = "Nhà xuất bản Thanh Niên"
                        },
                        new
                        {
                            Id = new Guid("d51db000-babf-4e95-8e7d-89f801cb734e"),
                            Name = "Nhà xuất bản Phụ Nữ"
                        });
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantities")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("StockQuantities");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("SubGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dea64975-e00c-405e-98ca-654c06b67274"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7537),
                            GenreId = new Guid("216c23c9-cdc5-4d70-9e46-c7103ac34114"),
                            Name = "Tiểu thuyết",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7538)
                        },
                        new
                        {
                            Id = new Guid("91c13167-a565-4fc6-ae34-322791252cca"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7545),
                            GenreId = new Guid("216c23c9-cdc5-4d70-9e46-c7103ac34114"),
                            Name = "Truyện ngắn",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7545)
                        },
                        new
                        {
                            Id = new Guid("7324638b-0859-463b-aac0-e5151709bc40"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7548),
                            GenreId = new Guid("216c23c9-cdc5-4d70-9e46-c7103ac34114"),
                            Name = "Thơ",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7548)
                        },
                        new
                        {
                            Id = new Guid("40af47b6-1602-4b20-aa3b-db93f2ecc212"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7550),
                            GenreId = new Guid("8e75fd1f-cc4b-4f7c-8fd2-9709af8ddc0a"),
                            Name = "Marketing",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7551)
                        },
                        new
                        {
                            Id = new Guid("4b5989be-adcc-4840-bfa5-bdd39399bafc"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7554),
                            GenreId = new Guid("8e75fd1f-cc4b-4f7c-8fd2-9709af8ddc0a"),
                            Name = "Khởi nghiệp",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7555)
                        },
                        new
                        {
                            Id = new Guid("68a9e25a-eae6-4daf-9a68-34c69a6c6500"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7557),
                            GenreId = new Guid("ed2ffafb-aacd-4c02-876c-3b0fbc8cf015"),
                            Name = "Phát triển bản thân",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7558)
                        },
                        new
                        {
                            Id = new Guid("142ed4e3-9ca1-4390-8541-8016c2a7fe68"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7560),
                            GenreId = new Guid("ed2ffafb-aacd-4c02-876c-3b0fbc8cf015"),
                            Name = "Tư duy tích cực",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7561)
                        },
                        new
                        {
                            Id = new Guid("827646f9-54d3-4bba-8eca-b71c76f6657d"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7563),
                            GenreId = new Guid("ed2ffafb-aacd-4c02-876c-3b0fbc8cf015"),
                            Name = "Kỹ năng giao tiếp",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7563)
                        },
                        new
                        {
                            Id = new Guid("65418997-1390-4cd6-8266-9efab8ea2c32"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7566),
                            GenreId = new Guid("ed23fc64-0b03-4676-8ee4-157990e589d0"),
                            Name = "Giáo dục sớm",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7566)
                        },
                        new
                        {
                            Id = new Guid("eaa5da07-9c56-4a2b-a71a-ce7d58233e39"),
                            CreateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7571),
                            GenreId = new Guid("ed23fc64-0b03-4676-8ee4-157990e589d0"),
                            Name = "Tâm lý học đường",
                            UpdateAt = new DateTime(2025, 7, 29, 3, 11, 6, 58, DateTimeKind.Utc).AddTicks(7572)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            ConcurrencyStamp = "845BD59F-2220-44E2-93A7-E1F6BE4FF0C3",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.AgeRating", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("HiNetProjectApi.Models.Domain.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.SubGenre", "SubGenre")
                        .WithMany()
                        .HasForeignKey("SubGenreId");

                    b.Navigation("AgeRating");

                    b.Navigation("CoverType");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");

                    b.Navigation("SubGenre");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.BookImage", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany("BookImages")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.CartDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Cart", null)
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Notification", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.OrderDetail", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Payment", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.Payment", "OderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.StockQuantity", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Book", "Book")
                        .WithOne("StockQuantity")
                        .HasForeignKey("HiNetProjectApi.Models.Domain.StockQuantity", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.SubGenre", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiNetProjectApi.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Book", b =>
                {
                    b.Navigation("BookImages");

                    b.Navigation("StockQuantity")
                        .IsRequired();
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Genre", b =>
                {
                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("HiNetProjectApi.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
